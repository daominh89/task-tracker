{"remainingRequest":"/home/mi/crashvue/tasktracker/node_modules/babel-loader/lib/index.js!/home/mi/crashvue/tasktracker/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/mi/crashvue/tasktracker/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/home/mi/crashvue/tasktracker/src/views/Home.vue?vue&type=script&lang=js","dependencies":[{"path":"/home/mi/crashvue/tasktracker/src/views/Home.vue","mtime":1643558910868},{"path":"/home/mi/crashvue/tasktracker/babel.config.js","mtime":1643377580946},{"path":"/home/mi/crashvue/tasktracker/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mi/crashvue/tasktracker/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/mi/crashvue/tasktracker/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mi/crashvue/tasktracker/node_modules/vue-loader-v16/dist/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/mi/crashvue/tasktracker/src/views/Home.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <AddTask v-show=\"showAddTask\" @add-task=\"addTask\"></AddTask>\n  <Tasks\n    @toggle-reminder=\"toggleReminder\"\n    @delete-task=\"deleteTask\"\n    :tasks=\"tasks\"\n  ></Tasks>\n</template>\n\n<script>\nimport Tasks from \"../components/Tasks.vue\";\nimport AddTask from \"../components/AddTask.vue\";\n\nexport default {\n  name: \"Home\",\n  props: {\n    showAddTask: Boolean,\n    tasks: Array,\n  },\n  components: {\n    Tasks,\n    AddTask,\n  },\n  data() {\n    return {\n      tasks: [],\n    };\n  },\n  methods: {\n    async addTask(task) {\n      const response = await fetch(\"api/tasks\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(task),\n      });\n\n      const data = await response.json();\n\n      this.tasks = [...this.tasks, data];\n    },\n    async deleteTask(id) {\n      if (confirm(\"Are you sure you want to delete this task?\")) {\n        const response = await fetch(`api/tasks/${id}`, {\n          method: \"DELETE\",\n        });\n\n        response.status === 200\n          ? (this.tasks = this.tasks.filter((task) => task.id !== id))\n          : alert(\"Something went wrong while deleting the task!\");\n        this.tasks = this.tasks.filter((task) => task.id !== id);\n      }\n    },\n\n    async toggleReminder(id) {\n      const taskToToggle = await this.fetchTask(id);\n      const updTask = { ...taskToToggle, reminder: !taskToToggle.reminder };\n\n      const response = await fetch(`api/tasks/${id}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(updTask),\n      });\n\n      const data = await response.json();\n\n      this.tasks = this.tasks.map((task) =>\n        task.id === id ? { ...task, reminder: data.reminder } : task\n      );\n    },\n    async fetchTasks() {\n      const response = await fetch(\"api/tasks\");\n      const data = await response.json();\n      return data;\n    },\n    async fetchTask(id) {\n      const response = await fetch(`api/tasks/${id}`);\n      const data = await response.json();\n      return data;\n    },\n  },\n  async created() {\n    this.tasks = await this.fetchTasks();\n  },\n};\n</script>\n"],"sourceRoot":""}]}